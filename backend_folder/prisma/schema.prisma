// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  firstName        String        @db.VarChar(255)
  lastName         String        @db.VarChar(255)
  email            String        @unique @db.VarChar(255)
  phone            String        @db.VarChar(11)
  nic              String        @db.VarChar(13)
  dob              String
  gender           UserGender
  password         String        @db.VarChar(255)
  role             UserRole
  doctorDepartment String?
  docImage         DocImage?
  appointments     Appointment[]
  messages         Message[]
}

model DocImage {
  id       Int    @id @default(autoincrement())
  publicId String
  url      String
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id])
}

model Message {
  id        Int    @id @default(autoincrement())
  firstName String @db.VarChar(255)
  lastName  String @db.VarChar(255)
  email     String @db.VarChar(255)
  phone     String @db.VarChar(11)
  message   String @db.Text
  userId    Int?
  user      User?  @relation(fields: [userId], references: [id])
}

model Appointment {
  id              Int               @id @default(autoincrement())
  firstName       String            @db.VarChar(255)
  lastName        String            @db.VarChar(255)
  email           String            @db.VarChar(255)
  phone           String            @db.VarChar(11)
  nic             String            @db.VarChar(13)
  dob             String
  gender          UserGender
  appointmentDate String
  department      String            @db.VarChar(255)
  doctorFirstName String            @db.VarChar(255)
  doctorLastName  String            @db.VarChar(255)
  hasVisited      Boolean           @default(false)
  address         String            @db.VarChar(255)
  doctorId        Int
  patientId       Int
  status          AppointmentStatus @default(Pending)
  patient         User              @relation(fields: [patientId], references: [id])
}

enum UserGender {
  Male
  Female
}

enum UserRole {
  Patient
  Doctor
  Admin
}

enum AppointmentStatus {
  Pending
  Accepted
  Rejected
}
